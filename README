
The key idea of this project is that maybe what we call "magnetic fields" are just the 
result of speed-of-light delayed moving electric fields.  With modern GPUs I think we 
can simulate things well enough to test this idea.  We are not and will not use any direct
"magnetic" concepts in the simulation.  If we can get "electro magnetic waves" without
using magnetism, then "electon waves", the name of this project, seems like a good name.

I have collected some chatbot opinions of this idea in the file chatbot.opinions.  

Only when calculating forces between electrons do we have an N-squared problem.  This
is the most performance critical part.  This part is done in CUDA with the code in kernel.cu.   

Much of the rest of the computaion is done using CuPy vectors in Python in electronwaves.py.  
Some output/visualization code is done with Python/Numpy vectors so they can run 
on CPU cores in the background.

Several bash scripts to make video from output images etc.


## Integration with Vast.AI

The script can be executed remotely.

The https://vast.ai is a global GPU market, here you can rent a machine with powerful GPU and run magnetic fields simulation remotely.

At first you must have an account on https://vast.ai and enough account balance.

Vast.AI provides command-line client tool and API integration.

Here are few steps you need to do first to to be able to rent an instance and start the script remotely.



###### SSH key

Add public part of your SSH key to the Vast.AI account: https://cloud.vast.ai/account/



###### Install Vast.AI client locally

        make vastai_install



###### API key

Now you need to authorise yourself using Vast.AI API key.

Go to https://cloud.vast.ai/account/ and copy the API key shown in your account.

Run following command locally:

        make vastai_login API_KEY=abcdef123456...



###### Rent an instance

Now it is time to rent hardware from the Vast.AI market. You can do that via web-site here: https://cloud.vast.ai/create/

Another option is to do that via command-line. To print all of the available offers, run following command locally:

        make vastai_offers


Now you need to decide which machine you are going to use and copy the ID of the offer - this is a value from the first column in the table.

Please take in account the CUDA version which is installed on the target machine. You will have to chose corresponding docker image version provided by NVIDIA: https://hub.docker.com/r/nvidia/cuda/tags?name=devel-ubuntu

Finally, to be able to create an instance on Vast.AI you need to know two things:

    + offer ID of the target machine from the market
    + full version name of the docker image you are going to install on the target machine


Here is a short command to rent a machine via command line:

        make vastai_instance_create ID=123456 IMAGE='nvidia/cuda:12.2.2-devel-ubuntu20.04'


A new `current_contract_id.txt` file is created locally which holds your contract ID with Vast.AI. This is a different ID, not the offer ID you used in a previous step. The contract ID is required to manipulate your running instance.

It will take some time to launch your instance - it will not be accesible right away.

To destroy the instance you can simply run bellow command - do not forget to do that after you finished with script simulations (because you still have to pay for it, even when you are not using it):

        make vastai_instance_destroy



###### Run magnetic fields simulation remotely

Now, after you rented and prepared a remote hardware, you can finally start the script.

Bellow command will automatically install all required libraries, clone this repository into the instance and execute the simulation:

        make vastai_run SIMULATION_NUMBER=1
